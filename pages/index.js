import Head from 'next/head'
import Form from '@/components/Form';
import { useEffect, useState } from 'react';
import Table from '@/components/Table';
import TableHeader from '@/components/TableHeader';


const getSheetHeaders = (data) => {

  if (data&&data.length) {
    return data?.map(item => Object.keys(item))[0].map(item => { return { key: item, label: item.toUpperCase() } })
  }

}

const searchHandle = (value, initailValues) => {
  // loop through all objects keys to find searched text matched object

  if (value === '') {
    return initailValues
  }

  const columsOnly = initailValues.map(item => Object.keys(item))[0];

  return initailValues.filter(item => {
    return columsOnly.some(x => item[x].toString().includes(value))
  })

}


export default function Home() {

  const [users, setUsers] = useState([]);
  const [searchVal, setSearch] = useState('');
  const [selectedRows, setSelectedRows] = useState([]);

  // Retrive data from local api in a useeffect to prevent hydration errors
  useEffect(() => {

    // check if there is any existed users array fisrt
    if (localStorage.getItem('users')) {

      //if existed added in users react state
      setUsers(JSON.parse(localStorage.getItem('users')))
    } else {

      //if null initiat it with just an empty array
      setUsers([])
    }

  }, [])

  //Search affect handling:
  useEffect(() => {
    
      const filteredUsers = searchHandle(searchVal, JSON.parse(localStorage.getItem('users')));
      setUsers(filteredUsers)

  }, [searchVal])

  // Add new user
  const addUserHandler = (user) => {
    // update users state by adding new one 
    setUsers(pervUSers => [user, ...pervUSers]);

    // then set it to the local to be persisted
    const newUsers = [...users, user]
    localStorage.setItem('users', JSON.stringify(newUsers))
  }

  // Update users data 
  const editUserHandler = (data, id) => {

    const user = users.find(x => x.id === id);
    const updatedUser = { ...user, ...data }

    const updatedUsers = users.map((user) => user.id === id ? updatedUser : user)

    setUsers(updatedUsers)
    localStorage.setItem('users', JSON.stringify(updatedUsers))

  }

  // delete user
  const deleteUserHandler = (id) => {
    const filteredUsers = users.filter((user) => user.id !== id);
    setUsers(filteredUsers);
    localStorage.setItem('users', JSON.stringify(filteredUsers))
  }

  // Sort any columns ascending or descinding
  const sortUsersHandler = (sort, prop) => {

    const sortedData = users.sort((a, b) => {

      if (sort === 'asc') {
        return a[prop] > b[prop] ? 1 : -1
      } else {
        return a[prop] < b[prop] ? 1 : -1
      }

    })

    setUsers([...sortedData]);
  }

  // Filter any column
  const filterHandler = (value, prop) => {

    const filteredElements = users.filter((item) => item[prop] == value);

    if (!value) {
      setUsers(JSON.parse(localStorage.getItem('users')))
    } else {
      setUsers(filteredElements)
    }

  }

  return (
    <>
      <Head>
        <title>Users CRUD Grid</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>

        <header>
          <h1>User Crud Task</h1>
        </header>

        <section>
          <Form onAdd={addUserHandler} />
        </section>

        <section>

          <TableHeader selectedRows={selectedRows} data={users} headers={getSheetHeaders(users)} value={searchVal} onSearch={(value) => setSearch(value)} />

          <Table
            data={users}
            editHandler={editUserHandler}
            onDelete={deleteUserHandler}
            onSort={sortUsersHandler}
            onFilter={filterHandler}
            getSelectedRows={(rows)=>setSelectedRows(rows)}
          />

        </section>

      </main>
    </>
  )
}
